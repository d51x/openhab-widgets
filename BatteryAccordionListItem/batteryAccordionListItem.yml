uid: minBatteryAccordion_ListItem
tags:
  - battery
  - list
props:
  parameters:
    - context: item
      description: Group:Number:MIN Item that aggregates all the battery levels
      label: Minimum Battery Level Item
      name: minLevel
      required: true
      type: TEXT
      filterCriteria:
        - value: Group
          name: type
    - default: "100"
      description: Maximum percentage to show in the widget
      label: Max Percent
      name: max
      required: false
      type: INTEGER
      min: 0
      max: 100
    - default: "60"
      description: The percentage above which green is used
      label: Green Level
      name: green
      required: false
      type: INTEGER
      min: 0
      max: 100
    - default: "30"
      description: The percentage above which orange is used
      label: Orange Level
      name: orange
      required: false
      type: INTEGER
      min: 0
      max: 100
    - default: Minimum Battery Level
      description: Title used for the widget to the left of the colon.
      label: Title
      name: title
      required: false
      type: TEXT
  parameterGroups: []
timestamp: Jan 25, 2023, 6:39:14 PM
component: oh-list-item
config:
  title: '=props.title + ": " + ((items[props.minLevel].displayState === undefined) ? items[props.minLevel].state : items[props.minLevel].displayState)'
  icon: '=(Number.parseFloat(items[props.minLevel].state) > props.green) ? "f7:battery_100" : (Number.parseFloat(items[props.minLevel].state) > props.orange) ? "f7:battery_25" : "f7:battery_0"'
  iconColor: '=(Number.parseFloat(items[props.minLevel].state) > props.green) ? "green" : (Number.parseFloat(items[props.minLevel].state) > props.orange) ? "orange" : "red"'
  style:
    --f7-list-item-after-font-size: 16px
    --f7-list-item-after-text-color: "=themeOptions.dark === 'dark' ? 'rgb(180,180,180)' : 'rgb(80,80,80)'"
slots:
  accordion:
    - component: f7-list
      config:
        mediaList: true
        style:
          background-color: "=themeOptions.dark === 'dark' ? 'rgb(35, 35, 35)' : 'rgb(247, 247, 247)'"
      slots:
        default:
          - component: oh-repeater
            config:
              filter: Number.parseFloat(items[loop.item.name].state) <= props.max
              for: item
              fragment: true
              groupItem: =props.minLevel
              sourceType: itemsInGroup
            slots:
              default:
                - component: oh-label-item
                  config:
                    style:
                      --f7-list-item-after-font-size: 15px
                      --f7-list-item-after-text-color: "=themeOptions.dark === 'dark' ? 'rgb(180,180,180)' : 'rgb(100,100,100)'"
                      --f7-list-item-title-font-size: 15px
                      --f7-list-item-title-line-height: 32px
                      --f7-list-item-title-text-color: "=themeOptions.dark === 'dark' ? 'rgb(180,180,180)' : 'rgb(100,100,100)'"
                    badge: "=(items[loop.item.name].displayState === undefined) ? loop.item.state : items[loop.item.name].displayState"
                    badgeColor: '=(Number.parseFloat(loop.item.state) > props.green) ? "green" : (Number.parseFloat(loop.item.state) > props.orange) ? "orange" : "red"'
                    icon: '=(Number.parseFloat(loop.item.state) > props.green) ? "f7:battery_100" : (Number.parseFloat(loop.item.state) > props.orange) ? "f7:battery_25" : "f7:battery_0"'
                    iconColor: '=(Number.parseFloat(loop.item.state) > props.green) ? "green" : (Number.parseFloat(loop.item.state) > props.orange) ? "orange" : "red"'
                    title: =loop.item.label
                    after: = ""
                    action: analyzer
                    actionAnalyzerItems: =[loop.item.name]
                    actionAnalyzerCoordSystem: time